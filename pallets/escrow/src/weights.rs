
//! Autogenerated weights for `escrow`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-04, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `pc-193-62.customer.ask4.lan`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// escrow
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn sign_contract() -> Weight;
	fn withdraw_funds() -> Weight;
}

/// Weight functions for `escrow`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Escrow ContractSender (r:0 w:1)
	// Storage: Escrow ContractReceiver (r:0 w:1)
	fn sign_contract() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Escrow ContractSender (r:1 w:0)
	// Storage: Escrow ContractReceiver (r:1 w:0)
	fn withdraw_funds() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
}
