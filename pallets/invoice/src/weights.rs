
//! Autogenerated weights for `invoice`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-20, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `pc-193-62.customer.ask4.lan`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// invoice
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/invoice/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;


pub trait WeightInfo {
	fn create_invoice() -> Weight;
	fn exist_invoice() -> Weight;
	fn pay_invoice() -> Weight;
}
/// Weight functions for `invoice`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Invoice SimpleMap (r:1 w:1)
	// Storage: Invoice InvoiceReceiver (r:0 w:1)
	// Storage: Invoice InvoiceSender (r:0 w:1)
	fn create_invoice() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Invoice InvoiceSender (r:1 w:0)
	fn exist_invoice() -> Weight {
		(5_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Invoice InvoiceSender (r:1 w:0)
	// Storage: Invoice InvoiceReceiver (r:1 w:1)
	fn pay_invoice() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
